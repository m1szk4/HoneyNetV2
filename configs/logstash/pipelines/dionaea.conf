# Dionaea Honeypot Logstash Pipeline
# Processes Dionaea multi-protocol honeypot logs

input {
  file {
    path => "/input/dionaea/dionaea.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/dionaea_sincedb"
    codec => json
    type => "dionaea"
  }
}

filter {
  if [type] == "dionaea" {
    # Parse timestamp first
    date {
      match => ["timestamp", "UNIX", "ISO8601"]
      target => "@timestamp"
    }

    # Normalize fields first
    mutate {
      rename => {
        "connection_remote_host" => "remote_host"
        "connection_remote_port" => "remote_port"
        "connection_local_host" => "local_host"
        "connection_local_port" => "local_port"
        "connection_protocol" => "protocol"
      }
      add_field => { "honeypot_type" => "dionaea" }
    }

    # GeoIP lookup BEFORE anonymization
    if [remote_host] {
      geoip {
        source => "remote_host"
        target => "geoip"
        fields => ["country_code2"]
        tag_on_failure => ["_geoip_lookup_failure"]
      }

      # Extract country code
      if [geoip][country_code2] {
        mutate {
          add_field => { "source_ip_country" => "%{[geoip][country_code2]}" }
        }
      } else {
        mutate {
          add_field => { "source_ip_country" => "" }
        }
      }
    }

    # Anonymize source IP AFTER GeoIP
    ruby {
      code => '
        require "digest"
        salt = ENV["ANON_SALT"] || "default_salt"
        if event.get("remote_host") || event.get("src_ip")
          ip = event.get("remote_host") || event.get("src_ip")
          hashed_ip = Digest::SHA256.hexdigest(salt + ip.to_s)
          event.set("source_ip_hash", hashed_ip[0..15])
        end
      '
    }

    # Determine event type from connection type
    if [connection_type] {
      mutate {
        add_field => { "event_type" => "%{connection_type}" }
      }
    } else {
      mutate {
        add_field => { "event_type" => "connection" }
      }
    }

    # Remove original IP and temporary fields
    mutate {
      remove_field => ["remote_host", "connection_remote_host", "src_ip", "geoip"]
    }
  }
}

output {
  # Main events table
  http {
    url => "http://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/?query=INSERT%20INTO%20${CLICKHOUSE_DB}.honeypot_events%20FORMAT%20JSONEachRow"
    http_method => "post"
    format => "json_batch"
    content_type => "application/json"
    automatic_retries => 3
    mapping => {
      "timestamp" => "%{@timestamp}"
      "event_id" => "%{connection}"
      "honeypot_type" => "dionaea"
      "source_ip_hash" => "%{source_ip_hash}"
      "source_ip_country" => "%{source_ip_country}"
      "source_port" => "%{remote_port}"
      "dest_ip" => "%{local_host}"
      "dest_port" => "%{local_port}"
      "protocol" => "%{protocol}"
      "event_type" => "%{event_type}"
      "username" => ""
      "password" => ""
      "command" => ""
      "session_id" => "%{connection}"
      "success" => "false"
      "raw_data" => "%{message}"
    }
  }

  # File downloads (if malware sample captured)
  if [md5_hash] or [sha512_hash] {
    http {
      url => "http://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/?query=INSERT%20INTO%20${CLICKHOUSE_DB}.downloaded_files%20FORMAT%20JSONEachRow"
      http_method => "post"
      format => "json_batch"
      content_type => "application/json"
      mapping => {
        "timestamp" => "%{@timestamp}"
        "file_id" => "%{md5_hash}"
        "source_ip_hash" => "%{source_ip_hash}"
        "honeypot_type" => "dionaea"
        "filename" => "%{filename}"
        "file_size" => "0"
        "mime_type" => ""
        "md5_hash" => "%{md5_hash}"
        "sha1_hash" => ""
        "sha256_hash" => "%{sha512_hash}"
        "download_url" => ""
        "file_path" => ""
      }
    }
  }

  # Debug output (optional)
  # stdout { codec => rubydebug }
}
