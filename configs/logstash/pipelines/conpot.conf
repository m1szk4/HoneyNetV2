# Conpot ICS/SCADA Honeypot Logstash Pipeline
# Processes Conpot industrial control system honeypot logs

input {
  file {
    path => "/input/conpot/conpot.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/conpot_sincedb"
    codec => json
    type => "conpot"
  }
}

filter {
  if [type] == "conpot" {
    # Parse timestamp first
    date {
      match => ["timestamp", "ISO8601", "UNIX"]
      target => "@timestamp"
    }

    # Extract IP and port from remote array first
    if [remote] and [remote][0] {
      mutate {
        add_field => {
          "temp_ip" => "%{[remote][0]}"
          "source_port" => "%{[remote][1]}"
        }
      }
    }

    # GeoIP lookup BEFORE anonymization
    if [temp_ip] {
      geoip {
        source => "temp_ip"
        target => "geoip"
        fields => ["country_code2"]
        tag_on_failure => ["_geoip_lookup_failure"]
      }

      # Extract country code
      if [geoip][country_code2] {
        mutate {
          add_field => { "source_ip_country" => "%{[geoip][country_code2]}" }
        }
      } else {
        mutate {
          add_field => { "source_ip_country" => "" }
        }
      }
    }

    # Anonymize source IP AFTER GeoIP
    ruby {
      code => '
        require "digest"
        salt = ENV["ANON_SALT"] || "default_salt"
        if event.get("temp_ip")
          ip = event.get("temp_ip")
          hashed_ip = Digest::SHA256.hexdigest(salt + ip.to_s)
          event.set("source_ip_hash", hashed_ip[0..15])
        end
      '
    }

    # Extract protocol and event type
    if [data_type] {
      mutate {
        add_field => { "protocol" => "%{data_type}" }
      }
    }

    # Determine event type based on request type
    if [request] {
      mutate {
        add_field => { "event_type" => "request" }
      }
    } else {
      mutate {
        add_field => { "event_type" => "connection" }
      }
    }

    # Add honeypot type
    mutate {
      add_field => { "honeypot_type" => "conpot" }
    }

    # Remove original IP and temporary fields
    mutate {
      remove_field => ["remote", "temp_ip", "geoip"]
    }
  }
}

output {
  # Main events table
  http {
    url => "http://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}/?query=INSERT%20INTO%20${CLICKHOUSE_DB}.honeypot_events%20FORMAT%20JSONEachRow"
    http_method => "post"
    format => "json_batch"
    content_type => "application/json"
    automatic_retries => 3
    mapping => {
      "timestamp" => "%{@timestamp}"
      "event_id" => "%{id}"
      "honeypot_type" => "conpot"
      "source_ip_hash" => "%{source_ip_hash}"
      "source_ip_country" => "%{source_ip_country}"
      "source_port" => "%{source_port}"
      "dest_ip" => ""
      "dest_port" => "%{[public_ip][1]}"
      "protocol" => "%{protocol}"
      "event_type" => "%{event_type}"
      "username" => ""
      "password" => ""
      "command" => "%{request}"
      "session_id" => "%{session_id}"
      "success" => "false"
      "raw_data" => "%{message}"
    }
  }

  # Debug output (optional)
  # stdout { codec => rubydebug }
}
