# RTSP Honeypot Logstash Pipeline
# Processes RTSP IP Camera/DVR honeypot logs

input {
  file {
    path => "/input/rtsp/rtsp.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/rtsp_sincedb"
    codec => json
    type => "rtsp"
  }
}

filter {
  # Parse RTSP JSON logs
  if [type] == "rtsp" {
    # Extract timestamp
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }

    # GeoIP lookup BEFORE anonymization
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        fields => ["country_code2"]
        tag_on_failure => ["_geoip_lookup_failure"]
      }

      # Extract country code
      if [geoip][country_code2] {
        mutate {
          add_field => { "source_ip_country" => "%{[geoip][country_code2]}" }
        }
      } else {
        mutate {
          add_field => { "source_ip_country" => "" }
        }
      }
    }

    # Anonymize source IP AFTER GeoIP
    ruby {
      code => '
        require "digest"
        salt = ENV["ANON_SALT"] || "default_salt"
        if event.get("src_ip")
          hashed_ip = Digest::SHA256.hexdigest(salt + event.get("src_ip").to_s)
          event.set("source_ip_hash", hashed_ip[0..15])
        end
      '
    }

    # Normalize fields for ClickHouse schema
    # RTSP honeypot already provides standardized event_type
    # (session_start, session_end, options, describe, setup, play, teardown, attack_detected)

    # Add honeypot type (if not already present)
    if ![honeypot_type] {
      mutate {
        add_field => { "honeypot_type" => "rtsp" }
      }
    }

    # Rename fields to match ClickHouse schema
    mutate {
      rename => {
        "src_port" => "source_port"
        "dest_ip" => "destination_ip"
        "dest_port" => "destination_port"
      }
    }

    # Handle attack-specific fields
    if [attack_detected] == true {
      # Extract attack information
      if [attack_info] {
        # Convert attack_info object to JSON string for storage
        ruby {
          code => '
            require "json"
            if event.get("attack_info")
              event.set("attack_details", event.get("attack_info").to_json)
            end
          '
        }
      }

      # Add attack type to event_type for easier querying
      if [attack_type] {
        mutate {
          add_field => { "original_event_type" => "%{event_type}" }
          replace => { "event_type" => "attack_detected" }
        }
      }
    }

    # Extract RTSP-specific fields
    if [method] {
      mutate {
        add_field => { "rtsp_method" => "%{method}" }
      }
    }

    if [url] {
      mutate {
        add_field => { "rtsp_url" => "%{url}" }
      }
    }

    if [response_code] {
      mutate {
        add_field => { "rtsp_response_code" => "%{response_code}" }
      }
    }

    # Handle session duration
    if [duration] {
      mutate {
        convert => { "duration" => "float" }
      }
    }

    # Remove original IP and temporary fields
    mutate {
      remove_field => ["src_ip", "geoip", "host", "path", "type"]
    }
  }
}

output {
  if [type] == "rtsp" or [honeypot_type] == "rtsp" {
    # Output to ClickHouse honeypot_events table
    http {
      url => "http://${CLICKHOUSE_HOST:clickhouse}:${CLICKHOUSE_PORT:8123}/"
      http_method => "post"
      format => "message"
      content_type => "text/plain"
      message => 'INSERT INTO %{CLICKHOUSE_DB:honeynet}.honeypot_events FORMAT JSONEachRow
{
  "timestamp": "%{@timestamp}",
  "event_id": "%{session_id}",
  "honeypot_type": "rtsp",
  "source_ip_hash": "%{source_ip_hash}",
  "source_ip_country": "%{source_ip_country}",
  "source_port": %{source_port:0},
  "dest_ip": "%{destination_ip}",
  "dest_port": %{destination_port:554},
  "protocol": "rtsp",
  "event_type": "%{event_type}",
  "username": "",
  "password": "",
  "command": "%{[rtsp_method]}",
  "session_id": "%{session_id}",
  "success": %{[authenticated]:false},
  "raw_data": "%{[rtsp_url]}"
}'
      user => "${CLICKHOUSE_USER:honeynet}"
      password => "${CLICKHOUSE_PASSWORD:changeme}"
    }

    # Special handling for attack events
    if [attack_detected] == true {
      http {
        url => "http://${CLICKHOUSE_HOST:clickhouse}:${CLICKHOUSE_PORT:8123}/"
        http_method => "post"
        format => "message"
        content_type => "text/plain"
        message => 'INSERT INTO %{CLICKHOUSE_DB:honeynet}.rtsp_attacks FORMAT JSONEachRow
{
  "timestamp": "%{@timestamp}",
  "attack_id": "%{session_id}",
  "source_ip_hash": "%{source_ip_hash}",
  "source_ip_country": "%{source_ip_country}",
  "source_port": %{source_port:0},
  "dest_ip": "%{destination_ip}",
  "dest_port": %{destination_port:554},
  "attack_type": "%{attack_type}",
  "rtsp_method": "%{[rtsp_method]}",
  "rtsp_url": "%{[rtsp_url]}",
  "attack_details": %{[attack_details]:{}}
}'
        user => "${CLICKHOUSE_USER:honeynet}"
        password => "${CLICKHOUSE_PASSWORD:changeme}"
      }
    }

    # Debug output (optional, comment out in production)
    # stdout {
    #   codec => rubydebug
    # }
  }
}
