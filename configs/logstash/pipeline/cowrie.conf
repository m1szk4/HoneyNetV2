# Logstash Pipeline for Cowrie SSH/Telnet Honeypot
# Processes Cowrie JSON logs and sends to ClickHouse

input {
  file {
    path => "/input/cowrie/cowrie.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/sincedb/cowrie"
    codec => json
    type => "cowrie"
  }
}

filter {
  # Parse timestamp
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }

  # Anonymize source IP
  if [src_ip] {
    # Perform GeoIP lookup BEFORE anonymization
    geoip {
      source => "src_ip"
      target => "geoip"
      fields => ["country_code2", "country_name", "continent_code", "latitude", "longitude"]
    }

    # Extract country code
    if [geoip][country_code2] {
      mutate {
        add_field => { "country_code" => "%{[geoip][country_code2]}" }
      }
    } else {
      mutate {
        add_field => { "country_code" => "XX" }
      }
    }

    # Now anonymize the IP
    ruby {
      code => '
        require "openssl"
        salt = ENV["SALT_SECRET"] || "default-salt-change-me"
        src_ip = event.get("src_ip")
        if src_ip
          hmac = OpenSSL::HMAC.hexdigest("SHA256", salt, src_ip)
          event.set("source_ip_anon", hmac)
        end
      '
    }
  }

  # Classify events based on eventid
  if [eventid] {
    # Successful login - Valid Accounts
    if [eventid] == "cowrie.login.success" {
      mutate {
        add_field => {
          "attack_technique" => "T1078.001"
          "attack_tactic" => "Initial Access"
          "severity" => "medium"
          "is_bruteforce" => "1"
          "success" => "1"
        }
      }
    }

    # Failed login - Brute Force: Password Guessing
    else if [eventid] == "cowrie.login.failed" {
      mutate {
        add_field => {
          "attack_technique" => "T1110.001"
          "attack_tactic" => "Credential Access"
          "severity" => "low"
          "is_bruteforce" => "1"
          "success" => "0"
        }
      }
    }

    # Command execution - Unix Shell
    else if [eventid] == "cowrie.command.input" {
      mutate {
        add_field => {
          "attack_technique" => "T1059.004"
          "attack_tactic" => "Execution"
          "severity" => "high"
        }
      }

      # Store the command in payload field
      if [input] {
        mutate {
          rename => { "input" => "command" }
          add_field => { "payload" => "%{command}" }
        }
      }
    }

    # File download - Ingress Tool Transfer
    else if [eventid] == "cowrie.session.file_download" {
      mutate {
        add_field => {
          "attack_technique" => "T1105"
          "attack_tactic" => "Command and Control"
          "severity" => "critical"
        }
      }

      # Extract file information
      if [url] {
        mutate {
          add_field => { "download_url" => "%{url}" }
        }
      }
      if [shasum] {
        mutate {
          rename => { "shasum" => "file_hash" }
        }
      }
      if [outfile] {
        mutate {
          rename => { "outfile" => "filename" }
        }
      }
    }

    # Session opened
    else if [eventid] == "cowrie.session.connect" {
      mutate {
        add_field => {
          "attack_technique" => "T1021.004"
          "attack_tactic" => "Lateral Movement"
          "severity" => "info"
        }
      }
    }

    # Default for other events
    else {
      mutate {
        add_field => {
          "severity" => "low"
        }
      }
    }
  }

  # Hash password for GDPR compliance
  if [password] {
    ruby {
      code => '
        require "digest"
        password = event.get("password")
        if password && !password.empty?
          hash = Digest::SHA256.hexdigest(password)
          event.set("password_hash", hash)
        end
      '
    }
    # Remove plaintext password
    mutate {
      remove_field => ["password"]
    }
  }

  # Normalize field names
  mutate {
    rename => {
      "eventid" => "event_type"
      "sensor" => "honeypot_sensor"
      "dst_ip" => "dest_ip"
      "dst_port" => "dest_port"
      "src_port" => "source_port"
      "session" => "session_id"
    }
  }

  # Add honeypot name
  mutate {
    add_field => {
      "honeypot_name" => "cowrie"
      "protocol" => "tcp"
      "is_malicious" => "1"
    }
  }

  # Convert numeric fields
  mutate {
    convert => {
      "source_port" => "integer"
      "dest_port" => "integer"
      "is_bruteforce" => "integer"
      "success" => "integer"
    }
  }

  # Duration if available
  if [duration] {
    mutate {
      convert => { "duration" => "float" }
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => ["src_ip", "geoip", "path", "host", "message", "tags", "@version"]
  }
}

output {
  # Send to ClickHouse ssh_events table
  http {
    url => "http://clickhouse:8123/?query=INSERT%20INTO%20honeynet.ssh_events%20FORMAT%20JSONEachRow"
    http_method => "post"
    format => "json_batch"
    content_type => "application/json"
    automatic_retries => 3
    retry_non_idempotent => true
    pool_max => 50
    pool_max_per_route => 25
  }

  # Debug output (comment out in production)
  # stdout { codec => rubydebug }
}
