# Logstash Pipeline for Dionaea Honeypot
# Processes Dionaea HTTP/SMB logs and sends to ClickHouse

input {
  file {
    path => "/input/dionaea/dionaea.json"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/sincedb/dionaea"
    codec => json
    type => "dionaea"
  }
}

filter {
  # Parse timestamp
  date {
    match => ["timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
    target => "@timestamp"
  }

  # Anonymize source IP
  if [src_ip] or [remote_host] {
    # Use remote_host if src_ip not available
    if ![src_ip] and [remote_host] {
      mutate {
        add_field => { "src_ip" => "%{remote_host}" }
      }
    }

    # GeoIP lookup
    geoip {
      source => "src_ip"
      target => "geoip"
      fields => ["country_code2", "country_name"]
    }

    if [geoip][country_code2] {
      mutate {
        add_field => { "country_code" => "%{[geoip][country_code2]}" }
      }
    } else {
      mutate {
        add_field => { "country_code" => "XX" }
      }
    }

    # Anonymize
    ruby {
      code => '
        require "openssl"
        salt = ENV["SALT_SECRET"] || "default-salt-change-me"
        src_ip = event.get("src_ip")
        if src_ip
          hmac = OpenSSL::HMAC.hexdigest("SHA256", salt, src_ip)
          event.set("source_ip_anon", hmac)
        end
      '
    }
  }

  # Classify by connection type
  if [connection_type] == "http" or [url] {
    # HTTP event
    mutate {
      add_field => {
        "event_type" => "dionaea_http"
        "protocol" => "http"
      }
    }

    # Check for exploits
    if [url] =~ /\(\)\s*\{/ {
      mutate {
        add_field => {
          "is_exploit" => "1"
          "exploit_type" => "shellshock"
          "attack_technique" => "T1190"
          "attack_tactic" => "Initial Access"
          "severity" => "high"
        }
      }
    } else if [url] =~ /(\.\.\/|\.\.\\)/ {
      mutate {
        add_field => {
          "is_exploit" => "1"
          "exploit_type" => "path_traversal"
          "attack_technique" => "T1083"
          "attack_tactic" => "Discovery"
          "severity" => "medium"
        }
      }
    } else if [url] =~ /(union|select|insert|update|delete)/i {
      mutate {
        add_field => {
          "is_exploit" => "1"
          "exploit_type" => "sqli"
          "attack_technique" => "T1190"
          "attack_tactic" => "Initial Access"
          "severity" => "high"
        }
      }
    } else {
      mutate {
        add_field => { "severity" => "low" }
      }
    }

    # Normalize HTTP fields
    if [method] {
      mutate {
        rename => { "method" => "http_method" }
      }
    }

    if [user_agent] {
      mutate {
        copy => { "user_agent" => "payload" }
      }
    }

    # Store URL and user agent
    if [url] {
      mutate {
        add_field => { "request_url" => "%{url}" }
      }
    }

  } else if [connection_type] == "smb" {
    # SMB event
    mutate {
      add_field => {
        "event_type" => "dionaea_smb"
        "protocol" => "smb"
        "attack_technique" => "T1210"
        "attack_tactic" => "Lateral Movement"
        "severity" => "medium"
      }
    }

  } else if [connection_type] == "download" or [md5_hash] {
    # File download event
    mutate {
      add_field => {
        "event_type" => "dionaea_download"
        "attack_technique" => "T1105"
        "attack_tactic" => "Command and Control"
        "severity" => "critical"
      }
    }

    # Store file information
    if [md5_hash] {
      mutate {
        rename => { "md5_hash" => "file_hash" }
      }
    }
    if [file_size] {
      mutate {
        convert => { "file_size" => "integer" }
      }
    }
    if [download_url] {
      mutate {
        add_field => { "url" => "%{download_url}" }
      }
    }

  } else {
    # Generic connection
    mutate {
      add_field => {
        "event_type" => "dionaea_connection"
        "severity" => "info"
      }
    }
  }

  # Normalize field names
  mutate {
    rename => {
      "remote_port" => "source_port"
      "local_host" => "dest_ip"
      "local_port" => "dest_port"
      "connection_protocol" => "protocol"
    }
  }

  # Add honeypot name
  mutate {
    add_field => {
      "honeypot_name" => "dionaea"
      "is_malicious" => "1"
    }
  }

  # Convert types
  if [source_port] {
    mutate { convert => { "source_port" => "integer" } }
  }
  if [dest_port] {
    mutate { convert => { "dest_port" => "integer" } }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [
      "src_ip", "remote_host", "geoip", "path", "host", "message",
      "tags", "@version", "connection_type"
    ]
  }
}

output {
  # Route to appropriate table based on event type
  if [event_type] == "dionaea_http" {
    # HTTP events to http_events table
    http {
      url => "http://clickhouse:8123/?query=INSERT%20INTO%20honeynet.http_events%20FORMAT%20JSONEachRow"
      http_method => "post"
      format => "json_batch"
      content_type => "application/json"
      automatic_retries => 3
      retry_non_idempotent => true
    }
  } else if [event_type] == "dionaea_download" and [file_hash] {
    # File downloads to downloaded_files table
    http {
      url => "http://clickhouse:8123/?query=INSERT%20INTO%20honeynet.downloaded_files%20FORMAT%20JSONEachRow"
      http_method => "post"
      format => "json_batch"
      content_type => "application/json"
      automatic_retries => 3
      retry_non_idempotent => true
    }
  } else {
    # Everything else to main events table
    http {
      url => "http://clickhouse:8123/?query=INSERT%20INTO%20honeynet.events%20FORMAT%20JSONEachRow"
      http_method => "post"
      format => "json_batch"
      content_type => "application/json"
      automatic_retries => 3
      retry_non_idempotent => true
    }
  }

  # Debug output (comment out in production)
  # stdout { codec => rubydebug }
}
